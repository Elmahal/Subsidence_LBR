
var LBR_INT = ee.FeatureCollection([
  ee.Feature(
    ee.Geometry.Polygon([
      [
        [-92.16374526029226, 30.993897093969203], // Northwest corner
        [-89.76872572904226, 30.993897093969203], // Northeast corner
        [-89.76872572904226, 30.034425825386972], // Southeast corner
        [-92.16374526029226, 30.034425825386972]  // Southwest corner
      ]
    ], null, false),
    {
      "system:index": "0"
    }
  )
]);



 // Function to mask clouds using the Sentinel-2 QA band
function maskS2clouds(image) {
  var qa = image.select('QA60');
  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask).divide(10000);
}


// Load the Sentinel-2 ImageCollection, filter, mask clouds, and clip to the ROI
var dataset = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                  .filterDate('2023-01-01', '2023-01-30')
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
                  .map(maskS2clouds)
                  .map(function(image) { return image.clip(LBR_INT); }); // Clip each image in the collection to WBR_Parish

// Visualization parameters
var visualization = {
  min: 0.0,
  max: 0.3,
  bands: ['B4', 'B3', 'B2'],
};

// Set map center and zoom level - using the approximate center of WBR_Parish
Map.setCenter(-91.34, 30.4, 8);
// Add the clipped image collection (mean composite) to the map
Map.addLayer(dataset.mean(), visualization, 'LBR_INT');
